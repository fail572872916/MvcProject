package com.test.oschina.mvcproject.entity.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.test.oschina.mvcproject.entity.DetailPoint;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DETAIL_POINT".
*/
public class DetailPointDao extends AbstractDao<DetailPoint, Long> {

    public static final String TABLENAME = "DETAIL_POINT";

    /**
     * Properties of entity DetailPoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PointId = new Property(0, Long.class, "pointId", true, "point_id");
        public final static Property Rol = new Property(1, int.class, "rol", false, "ROL");
        public final static Property Col = new Property(2, int.class, "col", false, "COL");
        public final static Property XValue = new Property(3, int.class, "xValue", false, "X_VALUE");
        public final static Property YValue = new Property(4, int.class, "yValue", false, "Y_VALUE");
    }


    public DetailPointDao(DaoConfig config) {
        super(config);
    }
    
    public DetailPointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DETAIL_POINT\" (" + //
                "\"point_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pointId
                "\"ROL\" INTEGER NOT NULL ," + // 1: rol
                "\"COL\" INTEGER NOT NULL ," + // 2: col
                "\"X_VALUE\" INTEGER NOT NULL ," + // 3: xValue
                "\"Y_VALUE\" INTEGER NOT NULL );"); // 4: yValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DETAIL_POINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DetailPoint entity) {
        stmt.clearBindings();
 
        Long pointId = entity.getPointId();
        if (pointId != null) {
            stmt.bindLong(1, pointId);
        }
        stmt.bindLong(2, entity.getRol());
        stmt.bindLong(3, entity.getCol());
        stmt.bindLong(4, entity.getXValue());
        stmt.bindLong(5, entity.getYValue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DetailPoint entity) {
        stmt.clearBindings();
 
        Long pointId = entity.getPointId();
        if (pointId != null) {
            stmt.bindLong(1, pointId);
        }
        stmt.bindLong(2, entity.getRol());
        stmt.bindLong(3, entity.getCol());
        stmt.bindLong(4, entity.getXValue());
        stmt.bindLong(5, entity.getYValue());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DetailPoint readEntity(Cursor cursor, int offset) {
        DetailPoint entity = new DetailPoint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pointId
            cursor.getInt(offset + 1), // rol
            cursor.getInt(offset + 2), // col
            cursor.getInt(offset + 3), // xValue
            cursor.getInt(offset + 4) // yValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DetailPoint entity, int offset) {
        entity.setPointId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRol(cursor.getInt(offset + 1));
        entity.setCol(cursor.getInt(offset + 2));
        entity.setXValue(cursor.getInt(offset + 3));
        entity.setYValue(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DetailPoint entity, long rowId) {
        entity.setPointId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DetailPoint entity) {
        if(entity != null) {
            return entity.getPointId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DetailPoint entity) {
        return entity.getPointId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
